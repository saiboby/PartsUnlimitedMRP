apply plugin: 'war'

war {
  from 'Web'
  baseName='mrp'
}


dependencies {

        compile "org.stagemonitor:stagemonitor-web-servlet:0.88.8"
        compile "org.stagemonitor:stagemonitor-configuration:0.88.8"
	compile "org.stagemonitor:stagemonitor-tracing-elasticsearch:0.88.8"
	compile "org.stagemonitor:stagemonitor-tracing:0.88.8"

	compile project(":stagemonitor-tracing")

	compile project(":stagemonitor-jvm")

	compile project(":stagemonitor-jdbc")

	compile "io.dropwizard.metrics:metrics-json:$metricsVersion"

	provided 'javax.servlet:javax.servlet-api:3.0.1'

	// optional

	provided 'net.sf.uadetector:uadetector-resources:2014.10'

	provided 'org.springframework:spring-webmvc:3.1.4.RELEASE'

	provided 'org.springframework.boot:spring-boot:1.5.2.RELEASE'

	provided 'org.jboss.resteasy:resteasy-jaxrs:3.1.4.Final'



	testCompile project(':stagemonitor-core').sourceSets.test.output

	testCompile project(':stagemonitor-tracing').sourceSets.test.output

	testCompile 'org.springframework:spring-webmvc:4.1.9.RELEASE'

	testCompile 'org.springframework:spring-test:4.1.9.RELEASE'

	testCompile "org.elasticsearch.client:transport:$esVersion"

	testCompile "org.eclipse.jetty:jetty-server:$jettyVersion"

	testCompile "io.opentracing:opentracing-mock:$opentracingVersion"

}



processResources {

	filesMatching('/eum.*.js') {

		def replaceTokens = ['X-INSTANA-T': 'X-B3-TraceId',

							 'X-INSTANA-S': 'X-B3-SpanId',

							 'X-INSTANA-L': 'X-B3-Sampled']

		filter { String line ->

			replaceTokens.each {

				line = line.replace(it.key, it.value)

			}

			return line

		}

	}

}



task exportWidget(type: JavaExec) {

	classpath sourceSets.test.runtimeClasspath

	main = "org.stagemonitor.web.servlet.filter.HttpRequestMonitorFilterTest"

}



